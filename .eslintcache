[{"E:\\Reactjs\\tic-tac-toe-multiplayer\\src\\App.js":"1","E:\\Reactjs\\tic-tac-toe-multiplayer\\src\\components\\Icon.js":"2"},{"size":8111,"mtime":1637678866466,"results":"3","hashOfConfig":"4"},{"size":391,"mtime":1611772294842,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"jg51vi",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Reactjs\\tic-tac-toe-multiplayer\\src\\App.js",["11","12"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  Snackbar,\r\n  CardContent,\r\n  Container,\r\n  Button,\r\n  Modal,\r\n  Fade,\r\n} from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport useSound from \"use-sound\";\r\nimport \"./App.scss\";\r\n// components\r\nimport Icon from \"./components/Icon\";\r\nimport bgSong from \"./audios/bgSong.mp3\";\r\nimport click from \"./audios/click.mp3\";\r\nimport winner from \"./audios/winner.mp3\";\r\nimport draw from \"./audios/draw.mp3\";\r\n\r\n\r\nconst itemArray = new Array(9).fill(\"empty\");\r\n\r\nconst App = () => {\r\n  const [playerModal, setPlayerModal] = useState(true);\r\n  const [player1, set_player1] = useState(\"\");\r\n  const [player2, set_player2] = useState(\"\");\r\n  const [p1Point, set_p1Point] = useState(0);\r\n  const [p2Point, set_p2Point] = useState(0);\r\n  const [snackbar, set_snackbar] = useState(false);\r\n  const [snackData, set_snackData] = useState({\r\n    messsage: \"\",\r\n    severity: \"success\",\r\n  });\r\n  const [isCross, setIsCross] = useState(false);\r\n  const [win, set_win] = useState(false);\r\n  const [crossIndexes, set_crossIndexes] = useState([]);\r\n  const [crossAngle, set_crossAngle] = useState(\"\");\r\n  const [topMsg, set_topMsg] = useState(\"\");\r\n  const [bgPlay] = useSound(bgSong, {\r\n    volume: 0.1,\r\n  });\r\n  const [clickPlay] = useSound(click, {\r\n    volume: 1,\r\n  });\r\n  const [winnerPlay] = useSound(winner, {\r\n    volume: 1,\r\n  });\r\n  const [drawPlay] = useSound(draw, {\r\n    volume: 1,\r\n  });\r\n  useEffect(() => {\r\n    bgPlay();\r\n  }, []);\r\n  \r\n  const handleStart = () => {\r\n    if (player1 !== \"\" && player2 !== \"\") {\r\n      return setPlayerModal(false);\r\n    } else {\r\n      console.log(\"start\");\r\n      set_snackData({\r\n        messsage: \"Please fill all the fields.\",\r\n        severity: \"info\",\r\n      });\r\n      return set_snackbar(true);\r\n    }\r\n  };\r\n  const handleSnackClose = () => {\r\n    set_snackbar(false);\r\n  };\r\n  const reloadGame = () => {\r\n    setIsCross(false);\r\n    set_win(false);\r\n    itemArray.fill(\"empty\", 0, 9);\r\n    set_crossIndexes([]);\r\n    set_crossAngle(\"\");\r\n  };\r\n\r\n  const checkIsWinner = () => {\r\n    //  checking  winner of the game\r\n    if (\r\n      itemArray[0] === itemArray[1] &&\r\n      itemArray[0] === itemArray[2] &&\r\n      itemArray[0] !== \"empty\"\r\n    ) {\r\n      showWinner(itemArray[0]);\r\n      set_crossIndexes([0, 1, 2]);\r\n    } else if (\r\n      itemArray[3] !== \"empty\" &&\r\n      itemArray[3] === itemArray[4] &&\r\n      itemArray[4] === itemArray[5]\r\n    ) {\r\n      showWinner(itemArray[3]);\r\n      set_crossIndexes([3, 4, 5]);\r\n    } else if (\r\n      itemArray[6] !== \"empty\" &&\r\n      itemArray[6] === itemArray[7] &&\r\n      itemArray[7] === itemArray[8]\r\n    ) {\r\n      showWinner(itemArray[6]);\r\n      set_crossIndexes([6, 7, 8]);\r\n    } else if (\r\n      itemArray[0] !== \"empty\" &&\r\n      itemArray[0] === itemArray[3] &&\r\n      itemArray[3] === itemArray[6]\r\n    ) {\r\n      showWinner(itemArray[0]);\r\n      set_crossIndexes([0, 3, 6]);\r\n    } else if (\r\n      itemArray[1] !== \"empty\" &&\r\n      itemArray[1] === itemArray[4] &&\r\n      itemArray[4] === itemArray[7]\r\n    ) {\r\n      showWinner(itemArray[1]);\r\n      set_crossIndexes([1, 4, 7]);\r\n    } else if (\r\n      itemArray[2] !== \"empty\" &&\r\n      itemArray[2] === itemArray[5] &&\r\n      itemArray[5] === itemArray[8]\r\n    ) {\r\n      showWinner(itemArray[2]);\r\n      set_crossIndexes([2, 5, 8]);\r\n    } else if (\r\n      itemArray[0] !== \"empty\" &&\r\n      itemArray[0] === itemArray[4] &&\r\n      itemArray[4] === itemArray[8]\r\n    ) {\r\n      showWinner(itemArray[0]);\r\n      set_crossIndexes([0, 4, 8]);\r\n    } else if (\r\n      itemArray[2] !== \"empty\" &&\r\n      itemArray[2] === itemArray[4] &&\r\n      itemArray[4] === itemArray[6]\r\n    ) {\r\n      showWinner(itemArray[2]);\r\n      set_crossIndexes([2, 4, 6]);\r\n    } else if (\r\n      itemArray.every((val) => {\r\n        return val !== \"empty\";\r\n      })\r\n    ) {\r\n      set_topMsg(`Match Tie`);\r\n      set_win(true);\r\n      drawPlay();\r\n    }\r\n  };\r\n\r\n  const changeItem = (itemNumber) => {\r\n    clickPlay();\r\n    if (win) {\r\n      set_snackData({\r\n        messsage: \"Match Finished . Please reloade ...\",\r\n        severity: \"info\",\r\n      });\r\n      return set_snackbar(true);\r\n    }\r\n    if (itemArray[itemNumber] === \"empty\") {\r\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\r\n      setIsCross(!isCross);\r\n    } else {\r\n      set_snackData({\r\n        messsage: \"Already Filled\",\r\n        severity: \"error\",\r\n      });\r\n      return set_snackbar(true);\r\n    }\r\n    checkIsWinner();\r\n  };\r\n  const showWinner = (val) => {\r\n    winnerPlay();\r\n    set_topMsg(`${val === \"circle\" ? player1 : player2} won`);\r\n    set_win(true);\r\n    val === \"circle\" ? set_p1Point(p1Point + 1) : set_p2Point(p2Point + 1);\r\n  };\r\n  useEffect(() => {\r\n    let dif = crossIndexes[1] - crossIndexes[0];\r\n    switch (dif) {\r\n      case 1:\r\n        set_crossAngle(\"horizontal\");\r\n        break;\r\n      case 2:\r\n        set_crossAngle(\"down_left\");\r\n        break;\r\n      case 3:\r\n        set_crossAngle(\"vertical\");\r\n        break;\r\n      case 4:\r\n        set_crossAngle(\"down_right\");\r\n        break;\r\n    }\r\n  }, [crossIndexes]);\r\n  return (\r\n    <Container className=\"main\">\r\n      <h1>Tic-Tac-Toe</h1>\r\n      {/* MODAL: Player name input modal */}\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className=\"modal\"\r\n        open={playerModal}\r\n        disableEnforceFocus\r\n      >\r\n        <Fade in={playerModal}>\r\n          <div className=\"modal_body\">\r\n            <lable>Player 1&nbsp;&nbsp;</lable>\r\n            <input\r\n              className=\"input_box\"\r\n              value={player1}\r\n              onChange={(e) => set_player1(e.target.value)}\r\n              type=\"text\"\r\n            />\r\n            <br />\r\n            <br />\r\n            <lable>Player 1&nbsp;&nbsp;</lable>\r\n            <input\r\n              className=\"input_box\"\r\n              value={player2}\r\n              onChange={(e) => set_player2(e.target.value)}\r\n              type=\"text\"\r\n            />\r\n            <Button\r\n              className=\"button\"\r\n              variant=\"contained\"\r\n              onClick={handleStart}\r\n            >\r\n              Start\r\n            </Button>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n\r\n      <div>\r\n        {win ? (\r\n          <h4 className=\"win_msg\">{topMsg}</h4>\r\n        ) : (\r\n          <>\r\n            {playerModal ? null : (\r\n              <h4 className=\"text-center text-warning\">\r\n                {isCross ? player2 : player1}'s turn\r\n              </h4>\r\n            )}\r\n          </>\r\n        )}\r\n        <div className=\"grid\">\r\n          {itemArray.map((item, index) => (\r\n            <Card className=\"box\" onClick={() => changeItem(index)}>\r\n              <CardContent>\r\n                <div\r\n                  className={`${\r\n                    crossIndexes.includes(index) ? \"cross\" : null\r\n                  } ${crossAngle}`}\r\n                ></div>\r\n                <Icon name={item} />\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n        <div className=\"bottom_div\">\r\n          {win ? (\r\n            <Button\r\n              className=\"reaload_button\"\r\n              variant=\"contained\"\r\n              color=\"warning\"\r\n              onClick={reloadGame}\r\n            >\r\n              Reload the game\r\n            </Button>\r\n          ) : null}\r\n          <Snackbar\r\n            open={snackbar}\r\n            autoHideDuration={6000}\r\n            onClose={handleSnackClose}\r\n          >\r\n            <Alert onClose={handleSnackClose} severity={snackData.severity}>\r\n              {snackData.messsage}\r\n            </Alert>\r\n          </Snackbar>\r\n        </div>\r\n      </div>\r\n      <div className=\"result_div\">\r\n        <section className=\"player1\">\r\n          <span>{p1Point}</span>\r\n          {player1}\r\n        </section>\r\n        <section dir=\"rtl\" className=\"player2\">\r\n          {player2}\r\n          <span>{p2Point}</span>\r\n        </section>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","E:\\Reactjs\\tic-tac-toe-multiplayer\\src\\components\\Icon.js",[],{"ruleId":"13","severity":1,"message":"14","line":54,"column":6,"nodeType":"15","endLine":54,"endColumn":8,"suggestions":"16"},{"ruleId":"17","severity":1,"message":"18","line":177,"column":5,"nodeType":"19","messageId":"20","endLine":190,"endColumn":6},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'bgPlay'. Either include it or remove the dependency array.","ArrayExpression",["21"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",{"desc":"22","fix":"23"},"Update the dependencies array to be: [bgPlay]",{"range":"24","text":"25"},[1517,1519],"[bgPlay]"]